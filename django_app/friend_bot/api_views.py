from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.utils import timezone
from django.conf import settings
from friend_bot.models import User, TelegramGroup, UserInGroup, Message, DailyCheckin, MessageTypePoints, Rank
from .serializers import IngestMessageSerializer
import os


class IngestMessageView(APIView):
    authentication_classes = []
    permission_classes = []

    def post(self, request):
        serializer = IngestMessageSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        data = serializer.validated_data

        if data['auth_token'] != settings.SECRET_KEY:
            return Response({'detail': 'Unauthorized'}, status=status.HTTP_401_UNAUTHORIZED)

        # User
        user, _ = User.objects.get_or_create(
            telegram_id=data['user_telegram_id'],
            defaults={
                'first_name': data.get('user_first_name') or '',
                'last_name': data.get('user_last_name') or '',
                'username': data.get('user_username') or '',
                'is_active': True,
            }
        )
        # Update basic fields if changed
        changed = False
        for field, key in [('first_name','user_first_name'), ('last_name','user_last_name'), ('username','user_username')]:
            val = data.get(key)
            if val is not None and getattr(user, field) != val:
                setattr(user, field, val)
                changed = True
        if changed:
            user.save()

        # Group
        group, _ = TelegramGroup.objects.get_or_create(
            telegram_id=data['chat_telegram_id'],
            defaults={'title': data.get('chat_title') or f'Group {data["chat_telegram_id"]}', 'is_active': True}
        )
        if data.get('chat_title') and group.title != data['chat_title']:
            group.title = data['chat_title']
            group.save()

        # Link user in group and get/create UserInGroup
        user_in_group, _ = UserInGroup.objects.get_or_create(
            user=user, 
            group=group, 
            defaults={
                'is_active': True,
                'rating': 0,
                'message_count': 0,
                'coefficient': 0.5  # –ù–∞—á–∏–Ω–∞–µ–º —Å 0.5 –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            }
        )

        # Message
        msg, created = Message.objects.get_or_create(
            telegram_id=data['telegram_message_id'],
            chat=group,
            defaults={
                'date': data['date_iso'],
                'user': user,
                'message_type': data['message_type'],
                'text': data.get('text') or '',
                'related_message': data.get('related_telegram_message_id'),
            }
        )
        if not created:
            # idempotency update
            updated = False
            for field, key in [('message_type','message_type'), ('text','text')]:
                val = data.get(key)
                if val is not None and getattr(msg, field) != val:
                    setattr(msg, field, val)
                    updated = True
            if updated:
                msg.save()

        # Add message points to UserInGroup
        result = user_in_group.add_message_points(data['message_type'])
        
        # Check if this is the first message and assign initial rank
        if not user_in_group.rank:
            user_in_group.update_rank()
        
        # –ï—Å–ª–∏ –∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        if result.get('rank_changed') and result.get('new_rank'):
            self._send_rank_notification(group, user, result['old_rank'], result['new_rank'])

        # DailyCheckin - –∏—Å–ø–æ–ª—å–∑—É–µ–º timezone.now() –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
        checkin, created = DailyCheckin.objects.get_or_create(
            user=user, 
            group=group, 
            defaults={
                'consecutive_days': 0,  # –ù–∞—á–∏–Ω–∞–µ–º —Å 0 –¥–Ω–µ–π
                'last_checkin': timezone.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Django timezone.now() —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            }
        )
        if not created:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞—Ç
            import pytz
            moscow_tz = pytz.timezone('Europe/Moscow')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º last_checkin –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            if checkin.last_checkin.tzinfo is None:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ UTC
                last_checkin_utc = pytz.utc.localize(checkin.last_checkin)
            else:
                last_checkin_utc = checkin.last_checkin
            last_checkin_moscow = last_checkin_utc.astimezone(moscow_tz)
            last_date = last_checkin_moscow.date()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
            current_time = timezone.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Django timezone.now() –≤–º–µ—Å—Ç–æ data['date_iso']
            if current_time.tzinfo is None:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ UTC
                current_utc = pytz.utc.localize(current_time)
            else:
                current_utc = current_time
            current_moscow = current_utc.astimezone(moscow_tz)
            today = current_moscow.date()
            
            diff = (today - last_date).days
            print(f"üîç DailyCheckin: last_date={last_date}, today={today}, diff={diff} –¥–Ω–µ–π")
            
            if diff == 1:
                checkin.consecutive_days += 1
                print(f"üîç –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º consecutive_days –¥–æ {checkin.consecutive_days}")
            elif diff > 1:
                checkin.consecutive_days = 0
                print(f"üîç –°–±—Ä–∞—Å—ã–≤–∞–µ–º consecutive_days (–ø—Ä–æ—à–ª–æ {diff} –¥–Ω–µ–π)")
            elif diff == 0:
                print(f"üîç –£–∂–µ —á–µ–∫–∏–Ω–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è")
            else:
                print(f"üîç –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –¥–Ω–µ–π: {diff} (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏)")
            
            checkin.last_checkin = timezone.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Django timezone.now() —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            checkin.save()
        else:
            # –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–≤–ª—è–µ–º consecutive_days = 0
            # –ü–µ—Ä–≤—ã–π —á–µ–∫–∏–Ω –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ "–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –¥–µ–Ω—å"
            print(f"üîç –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π DailyCheckin –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name}")
            pass

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ DailyCheckin
        try:
            checkin = DailyCheckin.objects.get(user=user, group=group)
            if checkin.consecutive_days == 0:
                user_in_group.coefficient = 0.5
            elif checkin.consecutive_days == 1:
                user_in_group.coefficient = 1.0
            else:
                user_in_group.coefficient = 1.0 + (checkin.consecutive_days - 1) * 0.1
            user_in_group.save()
        except DailyCheckin.DoesNotExist:
            pass

        return Response({'status': 'ok'}, status=status.HTTP_200_OK)

    def _send_rank_notification(self, group, user, old_rank, new_rank):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if old_rank is None:
                message = f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n@{user.username or user.first_name} –ø–æ–ª—É—á–∏–ª –ø–µ—Ä–≤–æ–µ –∑–≤–∞–Ω–∏–µ: <b>{new_rank.name}</b>"
            else:
                message = f"üèÜ <b>–ù–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ!</b>\n\n@{user.username or user.first_name} –ø–æ–≤—ã—Å–∏–ª—Å—è —Å <b>{old_rank.name}</b> –¥–æ <b>{new_rank.name}</b>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç —á–µ—Ä–µ–∑ Bot API
            self._send_telegram_message_direct(group.telegram_id, message)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–∞–Ω–∏–∏: {e}")
    
    def _send_telegram_message_direct(self, chat_id, message_text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Bot API (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)"""
        try:
            import requests
            
            print(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–∞–Ω–∏–∏ –≤ Telegram")
            print(f"üì§ Chat ID: {chat_id}")
            print(f"üì§ –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            if not bot_token:
                print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print(f"üì§ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω: {bot_token[:10]}...")
            
            # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            print(f"üì§ URL API: {url}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            data = {
                'chat_id': chat_id,
                'text': message_text,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            print(f"üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å...")
            response = requests.post(url, json=data, timeout=10)
            print(f"üì§ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status_code}")
            
            response.raise_for_status()
            
            result = response.json()
            print(f"üì§ –û—Ç–≤–µ—Ç API: {result}")
            
            if result.get('ok'):
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {result.get('description', 'Unknown error')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return False


class StatisticsView(APIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ"""
    authentication_classes = []
    permission_classes = []

    def post(self, request):
        try:
            print(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            print(f"üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {request.data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth_token = request.data.get('auth_token')
            chat_id = request.data.get('chat_id')
            
            if not auth_token or not chat_id:
                return Response({'detail': 'Missing auth_token or chat_id'}, status=status.HTTP_400_BAD_REQUEST)
            
            if auth_token != settings.SECRET_KEY:
                return Response({'detail': 'Unauthorized'}, status=status.HTTP_401_UNAUTHORIZED)
            
            print(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ telegram_id
            try:
                group = TelegramGroup.objects.get(telegram_id=chat_id)
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group.title}")
            except TelegramGroup.DoesNotExist:
                print(f"‚ùå –ì—Ä—É–ø–ø–∞ —Å telegram_id {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return Response({'detail': 'Group not found'}, status=status.HTTP_404_NOT_FOUND)
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (—É–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç)
            users_in_group = UserInGroup.objects.filter(
                group=group,
                is_active=True
            ).select_related('user', 'rank').order_by('-rating')
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ: {users_in_group.count()}")
            
            if not users_in_group:
                return Response({
                    'success': True,
                    'statistics': '–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'
                }, status=status.HTTP_200_OK)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stat_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ:</b>\n\n"
            
            for i, user_in_group in enumerate(users_in_group, 1):
                username = f"@{user_in_group.user.username}" if user_in_group.user.username else user_in_group.user.first_name
                rank_name = user_in_group.rank.name if user_in_group.rank else "–ù–µ—Ç –∑–≤–∞–Ω–∏—è"
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –¥–Ω–µ–π –∏–∑ DailyCheckin
                try:
                    checkin = DailyCheckin.objects.get(user=user_in_group.user, group=group)
                    consecutive_days = checkin.consecutive_days
                except DailyCheckin.DoesNotExist:
                    consecutive_days = 0
                
                stat_text += (
                    f"{i}. <b>{username}</b>\n"
                    f"   üèÜ {rank_name}\n"
                    f"   üìà –†–µ–π—Ç–∏–Ω–≥: {user_in_group.rating}\n"
                    f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user_in_group.message_count}\n"
                    f"   üî• –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –¥–Ω–µ–π: {consecutive_days}\n\n"
                )
            
            print(f"üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞, –¥–ª–∏–Ω–∞: {len(stat_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return Response({
                'success': True,
                'statistics': stat_text
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤ StatisticsView:")
            print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            import traceback
            traceback.print_exc()
            return Response({'detail': f'Error: {str(e)}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class SendMessageView(APIView):
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    authentication_classes = []
    permission_classes = []

    def post(self, request):
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            with open('/tmp/debug.log', 'a') as f:
                f.write(f"\n=== {timezone.now()} ===\n")
                f.write(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è\n")
                f.write(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {request.data}\n")
                f.write(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(request.data)}\n")
            
            print(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è")
            print(f"üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {request.data}")
            print(f"üîç –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(request.data)}")
            print(f"üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
            chat_id = request.data.get('chat_id')
            message_text = request.data.get('message_text')
            print(f"üîç chat_id: {chat_id}")
            print(f"üîç message_text (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {message_text[:100] if message_text else 'None'}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth_token = request.data.get('auth_token')
            expected_token = settings.SECRET_KEY
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Ç–æ–∫–µ–Ω–µ
            if auth_token:
                import html
                auth_token_decoded = html.unescape(auth_token)
                print(f"üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): {auth_token}")
                print(f"üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): {auth_token_decoded}")
                auth_token = auth_token_decoded
            
            print(f"üîç –û–∂–∏–¥–∞–µ–º—ã–π —Ç–æ–∫–µ–Ω: {expected_token[:20] if expected_token else 'None'}...")
            print(f"üîç –¢–æ–∫–µ–Ω—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç: {auth_token == expected_token}")
            print(f"üîç –î–ª–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {len(auth_token) if auth_token else 0}")
            print(f"üîç –î–ª–∏–Ω–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {len(expected_token) if expected_token else 0}")
            
            if not auth_token or auth_token != expected_token:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {auth_token}")
                return Response({'detail': 'Unauthorized'}, status=status.HTTP_401_UNAUTHORIZED)
            
            chat_id = request.data.get('chat_id')
            message_text = request.data.get('message_text')
            
            if not chat_id or not message_text:
                return Response({'detail': 'Missing chat_id or message_text'}, status=status.HTTP_400_BAD_REQUEST)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            success = self._send_telegram_message(chat_id, message_text)
            
            if success:
                return Response({'status': 'Message sent successfully'}, status=status.HTTP_200_OK)
            else:
                return Response({'detail': 'Failed to send message'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
                
        except Exception as e:
            import traceback
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ SendMessageView:")
            print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"‚ùå Traceback:")
            traceback.print_exc()
            return Response({'detail': f'Error: {str(e)}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
    def _send_telegram_message(self, chat_id, message_text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        try:
            import requests
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
            with open('/tmp/debug.log', 'a') as f:
                f.write(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}\n")
                f.write(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤\n")
            
            print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
            print(f"üîç –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            print(f"üîç TELEGRAM_BOT_TOKEN: {bot_token[:10] if bot_token else 'None'}...")
            
            if not bot_token:
                print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print(f"üîç –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            
            print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ–∫—Å—Ç–∞...")
            
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
            cleaned_text = message_text
            if cleaned_text.startswith('```html'):
                # –£–±–∏—Ä–∞–µ–º markdown-–±–ª–æ–∫
                cleaned_text = cleaned_text.replace('```html', '').replace('```', '').strip()
                print(f"üîç –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {cleaned_text[:200]}...")
            else:
                print(f"üîç –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç markdown-—Ä–∞–∑–º–µ—Ç–∫—É")
            
            print(f"üîç –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(cleaned_text) > 4000:
                print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"‚ö†Ô∏è Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 4096 —Å–∏–º–≤–æ–ª–æ–≤")
                # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª–∏–Ω—ã
                cleaned_text = cleaned_text[:4000] + "..."
                print(f"üîç –û–±—Ä–µ–∑–∞–Ω–æ –¥–æ {len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            data = {
                'chat_id': chat_id,
                'text': cleaned_text,
                'parse_mode': 'HTML',  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É
                'disable_web_page_preview': True
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
            with open('/tmp/debug.log', 'a') as f:
                f.write(f"URL: {url}\n")
                f.write(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {message_text[:200]}\n")
                f.write(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {cleaned_text[:200]}\n")
                f.write(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {data}\n")
                f.write(f"–î–ª–∏–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤\n")
                f.write(f"–î–ª–∏–Ω–∞ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤\n")
            
            print(f"üîç URL: {url}")
            print(f"üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            try:
                print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å...")
                response = requests.post(url, json=data, timeout=10)
                print(f"üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status_code}")
                print(f"üîç –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                
                response.raise_for_status()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                import traceback
                traceback.print_exc()
                return False
            
            result = response.json()
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç API: {result}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª
            with open('/tmp/debug.log', 'a') as f:
                f.write(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}\n")
                f.write(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}\n")
                f.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç API: {result}\n")
            
            if result.get('ok'):
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('description', 'Unknown error')}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return False
        except Exception as e:
            import traceback
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤ _send_telegram_message:")
            print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"‚ùå Traceback:")
            traceback.print_exc()
            return False
