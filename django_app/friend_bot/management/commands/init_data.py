from django.core.management.base import BaseCommand
from django.db import transaction
from friend_bot.models import Rank, MessageTypePoints, UserInGroup


class Command(BaseCommand):
    help = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã (–∑–≤–∞–Ω–∏—è –∏ –±–∞–ª–ª—ã –∑–∞ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π)'

    def restore_user_ranks(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        self.stdout.write('  üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–≤–∞–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
        
        ranks_restored = 0
        users_processed = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–≤–∞–Ω–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é required_rating
        ranks = list(Rank.objects.all().order_by('required_rating'))
        
        if not ranks:
            self.stdout.write('  ‚ùå –ù–µ—Ç –∑–≤–∞–Ω–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!')
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö
        user_in_groups = UserInGroup.objects.select_related('user', 'group').all()
        
        for user_in_group in user_in_groups:
            users_processed += 1
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            new_rank = None
            for rank in ranks:
                if user_in_group.rating >= rank.required_rating:
                    new_rank = rank
                else:
                    break
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–≤–∞–Ω–∏–µ –∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
            if new_rank and user_in_group.rank != new_rank:
                old_rank = user_in_group.rank
                user_in_group.rank = new_rank
                user_in_group.save()
                ranks_restored += 1
                
                if old_rank:
                    self.stdout.write(f'    ‚úì {user_in_group.user.first_name} –≤ –≥—Ä—É–ø–ø–µ {user_in_group.group.title}: {old_rank.name} ‚Üí {new_rank.name}')
                else:
                    self.stdout.write(f'    ‚úì {user_in_group.user.first_name} –≤ –≥—Ä—É–ø–ø–µ {user_in_group.group.title}: –ø–æ–ª—É—á–∏–ª –∑–≤–∞–Ω–∏–µ {new_rank.name}')
        
        self.stdout.write(f'  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_processed}, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–≤–∞–Ω–∏–π: {ranks_restored}')

    def handle(self, *args, **options):
        self.stdout.write('–ù–∞—á–∏–Ω–∞—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        with transaction.atomic():
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–≤–∞–Ω–∏–π (50 –∑–≤–∞–Ω–∏–π)
            ranks_created = 0
            ranks_data = [
                # –ù–∏–∑—à–∏–µ –∑–≤–∞–Ω–∏—è (0-1000)
                {'sort_order': 1, 'name': '—á–∏—Ä–∫–∞—à', 'required_rating': 0},
                {'sort_order': 2, 'name': '—à–º—ã–≥–∞', 'required_rating': 50},
                {'sort_order': 3, 'name': '—Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ö–æ–∂–∏–π', 'required_rating': 100},
                {'sort_order': 4, 'name': '—Å–æ–±–∞—á–∏–π —Ö–≤–æ—Å—Ç', 'required_rating': 200},
                {'sort_order': 5, 'name': '–º–µ—Ñ–µ–¥—Ä–æ–Ω—â–∏–∫', 'required_rating': 300},
                {'sort_order': 6, 'name': '—Ç—É—Ö–ª—ã–π –æ–±–∏—Ç–∞—Ç–µ–ª—å —á–∞—Ç–∞', 'required_rating': 400},
                {'sort_order': 7, 'name': '–∫–æ–Ω—Å–µ—Ä–≤–∞', 'required_rating': 500},
                {'sort_order': 8, 'name': '–æ–±–∏—Ç–∞—Ç–µ–ª—å —á–∞—Ç–∞', 'required_rating': 600},
                {'sort_order': 9, 'name': '–º–µ—Å—Ç–Ω—ã–π', 'required_rating': 700},
                {'sort_order': 10, 'name': '—à–∫—É—Ä–Ω–∏–∫', 'required_rating': 800},
                
                # –°—Ä–µ–¥–Ω–∏–µ –∑–≤–∞–Ω–∏—è (1000-5000)
                {'sort_order': 11, 'name': '–∫–∞–π—Ñ–∞—Ä—å', 'required_rating': 1000},
                {'sort_order': 12, 'name': '—Å–º–æ—Ç—Ä—è—â–∏–π', 'required_rating': 1500},
                {'sort_order': 13, 'name': '—É–≤–∞–∂–∞–µ–º—ã–π', 'required_rating': 2000},
                {'sort_order': 14, 'name': '—Å–ª–∞–¥–µ–Ω—å–∫–∏–π', 'required_rating': 2500},
                {'sort_order': 15, 'name': '—Ä—É–ª–µ—Ç —Å –º–∞–∫–æ–º', 'required_rating': 3000},
                {'sort_order': 16, 'name': '–∂–∏—Ä–æ–∫', 'required_rating': 3500},
                {'sort_order': 17, 'name': '—Å–æ–±–∞—á–∏–π –≥–µ–Ω–µ—Ä–∞–ª', 'required_rating': 4000},
                {'sort_order': 18, 'name': '—à–∫—É—Ä–Ω—ã–π –≤–ª–∞—Å—Ç–µ–ª–∏–Ω', 'required_rating': 4500},
                
                # –í—ã—Å—à–∏–µ –∑–≤–∞–Ω–∏—è (5000-15000)
                {'sort_order': 19, 'name': '–æ—á–∫–æ–ª–∏–∑—É–Ω', 'required_rating': 5000},
                {'sort_order': 20, 'name': '–ø–æ–¥—à–∫–æ–Ω–∞—Ä–Ω–∏–∫', 'required_rating': 6000},
                {'sort_order': 21, 'name': '–º–∏–ª—ã–π –±–ª–µ–≤–∞—à', 'required_rating': 7000},
                {'sort_order': 22, 'name': '–∑–Ω–∞—Ç–Ω—ã–π —Ö–∞—á–µ–≥–ª–æ—Ç', 'required_rating': 8000},
                {'sort_order': 23, 'name': '–∑–Ω–æ–π–Ω—ã–π –ø–∏–≤–æ–∑–∞–≤—Ä', 'required_rating': 9000},
                {'sort_order': 24, 'name': '–º–µ—Å—Ç–Ω—ã–π –∫–æ—Ä–µ—à', 'required_rating': 10000},
                {'sort_order': 25, 'name': '–ø–∞—Ç–ª–∞—Ç—ã–π –∫–æ–º–º–µ—Ä—Å', 'required_rating': 11000},
                {'sort_order': 26, 'name': '–ª—é—Ç—ã–π –∫–∏—à–∫–æ–±–ª—É–¥', 'required_rating': 12000},
                {'sort_order': 27, 'name': '–ø–∞—Ü–∞–Ω —Å –Ω–µ—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –≤–µ—Ä–æ–∏—Å–ø–æ–≤–µ–¥–∞–Ω–∏–µ–º', 'required_rating': 13000},
                {'sort_order': 28, 'name': '–∑–Ω–æ–π–Ω—ã–π –ø—ë—Å', 'required_rating': 14000},
                
                # –≠–ª–∏—Ç–Ω—ã–µ –∑–≤–∞–Ω–∏—è (15000-30000)
                {'sort_order': 29, 'name': '–ø–æ—á–µ—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª—É–±–∞ –õ—é–±–∏—Ç–µ–ª–µ–π –ø–æ—â–µ–∫–æ—Ç–∞—Ç—å –æ—á–∫–æ', 'required_rating': 15000},
                {'sort_order': 30, 'name': '–∫–æ—à–∞—á—å—è —Å–ª–∞–¥–æ—Å—Ç—å', 'required_rating': 17000},
                {'sort_order': 31, 'name': '—Å–æ—á–Ω—ã–π –º–∞–∫—á–∏–∫–µ–Ω', 'required_rating': 19000},
                {'sort_order': 32, 'name': '—É–≤–∞–∂–∞–µ–º—ã–π –†–æ–º–æ–π', 'required_rating': 21000},
                {'sort_order': 33, 'name': '–±–æ—Ä–æ–¥–∞—Ç—ã–π —Å—Ç—Ä–∏–ø—Ç–∏–∑–µ—Ä', 'required_rating': 23000},
                {'sort_order': 34, 'name': '—à–ø—Ä–æ—Ç–Ω—ã–π –º–∞–≥–Ω–∞—Ç', 'required_rating': 25000},
                {'sort_order': 35, 'name': '—Ç–µ–ø–ª–µ–Ω—å–∫–∏–π –ª–æ—Å–æ—Å—å', 'required_rating': 27000},
                
                # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∑–≤–∞–Ω–∏—è (30000+)
                {'sort_order': 36, 'name': '—Å–ª—é–Ω—è–≤—ã–π –ø–æ—Ç—Ä–æ—Ö', 'required_rating': 30000},
                {'sort_order': 37, 'name': '–≥–ª–∞–≤–Ω—ã–π –ø–æ –ø–æ–¥–ª–∏–≤–µ', 'required_rating': 32000},
                {'sort_order': 38, 'name': '—á–µ—Ö–æ–ª—å—á–∏–∫ –¥–ª—è —Å—Ä–∞–∫–∏', 'required_rating': 34000},
                {'sort_order': 39, 'name': '—Å–≤—è—â–µ–Ω–Ω—ã–π –∑–∞–≥–ª–æ—Ç—ã—à', 'required_rating': 36000},
                {'sort_order': 40, 'name': '–≤–æ–ª–æ—Å–∞—Ç—ã–π –æ–±–º—ã–ª–æ–∫', 'required_rating': 38000},
                {'sort_order': 41, 'name': '–≥–æ—Å–ø–æ–¥–∏–Ω –∂–æ–ø–∞', 'required_rating': 40000},
                {'sort_order': 42, 'name': '—Å–µ–∫—Ç–∞–Ω—Ç', 'required_rating': 42000},
                {'sort_order': 43, 'name': '—Å–Ω—é—Å–æ–µ–¥', 'required_rating': 44000},
                {'sort_order': 44, 'name': '–≥–æ–≤—è–∂–∏–π –≤–∞—Ñ–µ–ª', 'required_rating': 46000},
                {'sort_order': 45, 'name': '—Å—Ç–∞—Ä—à–∏–π –ø–æ –ø–µ—Ä–¥–µ–∂—É', 'required_rating': 48000},
                {'sort_order': 46, 'name': '–ø–µ–ª—å–º–µ–Ω—å —Å—É–¥—å–±—ã', 'required_rating': 50000},
                {'sort_order': 47, 'name': '—Ä–∞–∑—Ä–≥—Ä–µ—Ç—ã–π –º—É–∂–∏—á–æ–∫', 'required_rating': 52000},
                {'sort_order': 48, 'name': '–≤–∏–±—Ä–∏—Ä—É—é—â–∏–π –≥—É—Å—å', 'required_rating': 54000},
                {'sort_order': 49, 'name': '–Ω–æ—á–Ω–æ–π —Ä—ã–≥–∞—á', 'required_rating': 56000},
                {'sort_order': 50, 'name': '–ë–û–ì –ß–ê–¢–ê', 'required_rating': 60000},
            ]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
            Rank.objects.all().delete()
            self.stdout.write('  - –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–≤–∞–Ω–∏—è')
            
            for rank_data in ranks_data:
                rank = Rank.objects.create(**rank_data)
                ranks_created += 1
                self.stdout.write(f'  ‚úì –°–æ–∑–¥–∞–Ω–æ –∑–≤–∞–Ω–∏–µ: {rank.name} (—Ä–µ–π—Ç–∏–Ω–≥: {rank.required_rating})')
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–ª–ª—ã –∑–∞ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            points_created = 0
            points_data = [
                {'message_type': 'text', 'points': 2, 'description': '–û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'},
                {'message_type': 'voice', 'points': 1, 'description': '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'},
                {'message_type': 'photo', 'points': 3, 'description': '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'},
                {'message_type': 'video', 'points': 3, 'description': '–í–∏–¥–µ–æ'},
                {'message_type': 'sticker', 'points': 1, 'description': '–°—Ç–∏–∫–µ—Ä'},
                {'message_type': 'document', 'points': 1, 'description': '–î–æ–∫—É–º–µ–Ω—Ç'},
                {'message_type': 'audio', 'points': 2, 'description': '–ê—É–¥–∏–æ—Ñ–∞–π–ª'},
                {'message_type': 'video_note', 'points': 3, 'description': '–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ'},
                {'message_type': 'forward', 'points': 1, 'description': '–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'},
                {'message_type': 'other', 'points': 1, 'description': '–î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π'},
            ]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±–∞–ª–ª—ã –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
            MessageTypePoints.objects.all().delete()
            self.stdout.write('  - –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –±–∞–ª–ª—ã –∑–∞ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π')
            
            for point_data in points_data:
                point = MessageTypePoints.objects.create(**point_data)
                points_created += 1
                self.stdout.write(f'  ‚úì –°–æ–∑–¥–∞–Ω—ã –±–∞–ª–ª—ã: {point.get_message_type_display()} - {point.points}')
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.restore_user_ranks()
        
        self.stdout.write(
            self.style.SUCCESS(
                f'\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                f'   –°–æ–∑–¥–∞–Ω–æ –∑–≤–∞–Ω–∏–π: {ranks_created}\n'
                f'   –°–æ–∑–¥–∞–Ω–æ —Ç–∏–ø–æ–≤ –±–∞–ª–ª–æ–≤: {points_created}'
            )
        )
