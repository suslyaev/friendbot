from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View
from django.contrib.admin.views.decorators import staff_member_required
from django.utils import timezone
from django.conf import settings
from datetime import datetime, timedelta
import os
import json
from .models import TelegramGroup, Message, User, UserInGroup, DailyCheckin
from django.db import models


@staff_member_required
def group_summary_view(request, group_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –ø–æ –≥—Ä—É–ø–ø–µ"""
    group = get_object_or_404(TelegramGroup, id=group_id)
    
    if request.method == 'POST':
        start_datetime_str = request.POST.get('start_datetime')
        end_datetime_str = request.POST.get('end_datetime')
        custom_prompt = request.POST.get('custom_prompt')
        
        if start_datetime_str and end_datetime_str:
            try:
                start_datetime = datetime.strptime(start_datetime_str, '%Y-%m-%dT%H:%M')
                end_datetime = datetime.strptime(end_datetime_str, '%Y-%m-%dT%H:%M')
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                messages = Message.objects.filter(
                    chat=group,
                    date__gte=start_datetime,
                    date__lte=end_datetime
                ).order_by('date')
                
                if messages.exists():
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é OpenAI
                    summary = create_chat_summary(messages, group, start_datetime, end_datetime, custom_prompt)
                    
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    try:
                        secret_key = settings.SECRET_KEY
                        print(f"üîç SECRET_KEY –ø–æ–ª—É—á–µ–Ω: {secret_key[:20] if secret_key else 'None'}...")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SECRET_KEY: {e}")
                        secret_key = "default_secret_key"
                    
                    print(f"üîç –ü–µ—Ä–µ–¥–∞–µ–º auth_token –≤ —à–∞–±–ª–æ–Ω: {secret_key[:20] if secret_key else 'None'}...")
                    
                    return render(request, 'friend_bot/summary_result.html', {
                        'group': group,
                        'summary': summary,
                        'start_datetime': start_datetime_str,
                        'end_datetime': end_datetime_str,
                        'message_count': messages.count(),
                        'auth_token': secret_key
                    })
                else:
                    messages.error(request, '–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            except ValueError:
                messages.error(request, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏')
    
    return render(request, 'friend_bot/group_summary.html', {
        'group': group,
        'auth_token': settings.SECRET_KEY
    })


def create_chat_summary(messages, group, start_datetime, end_datetime, custom_prompt=None):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—é–º–µ —á–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI API"""
    try:
        from openai import OpenAI
        import requests
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        api_key = os.getenv('OPENAI_API_KEY')
        base_url = os.getenv('OPENAI_BASE_URL', 'https://api.openai.com/v1')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ base_url
        client = OpenAI(
            api_key=api_key,
            base_url=base_url
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        period_duration = end_datetime - start_datetime
        days = period_duration.days
        hours = period_duration.seconds // 3600
        
        if days > 0:
            period_text = f"{days} {'–¥–µ–Ω—å' if days == 1 else '–¥–Ω—è' if days < 5 else '–¥–Ω–µ–π'}"
        elif hours > 0:
            period_text = f"{hours} {'—á–∞—Å' if hours == 1 else '—á–∞—Å–∞' if hours < 5 else '—á–∞—Å–æ–≤'}"
        else:
            period_text = "–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏
        messages_with_links = []
        for msg in messages:
            # –£–±–∏—Ä–∞–µ–º -100 –∏–∑ chat_id –¥–ª—è —Å—Å—ã–ª–∫–∏
            chat_id_clean = str(group.telegram_id).replace('-100', '')
            message_link = f"https://t.me/c/{chat_id_clean}/{msg.telegram_id}"
            
            user_info = f"@{msg.user.username}" if msg.user.username else f"{msg.user.first_name}"
            message_text = msg.text[:100] + "..." if len(msg.text) > 100 else msg.text
            
            messages_with_links.append(f"[{user_info}: {message_text}]({message_link})")
        
        messages_text = "\n".join(messages_with_links)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        if custom_prompt:
            context = custom_prompt
        else:
            context = f"""
            –¢—ã - –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏–ª –∑–∞ —á–∞—Ç–æ–º –≤ –≥—Ä—É–ø–ø–µ "{group.title}" –∏ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–º—É –¥—Ä—É–≥—É, —á—Ç–æ –æ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞ {period_text} (—Å {start_datetime.strftime('%d.%m %H:%M')} –ø–æ {end_datetime.strftime('%d.%m %H:%M')}).
            
            –¢–≤–æ–π —Å—Ç–∏–ª—å - —ç—Ç–æ –¥—Ä—É–∂–µ—Å–∫–∞—è –±–µ—Å–µ–¥–∞ –∑–∞ –ø–∏–≤–æ–º, –∂–∏–≤–∞—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, —Å —à—É—Ç–∫–∞–º–∏ –∏ –ª–∏—á–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.
            
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏:
            - –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {messages.count()}
            - –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {UserInGroup.objects.filter(group=group, is_active=True).count()}
            
            –°–æ–∑–¥–∞–π –∂–∏–≤–æ–µ —Ä–µ–∑—é–º–µ –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç:
            1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π (2-3 –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã —Å —ç–º–æ—Ü–∏—è–º–∏)
            2. –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (—Å –ª–∏—á–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)
            3. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–ª–∏ —Ü–∏—Ç–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            4. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            
            –ü—Ä–∞–≤–∏–ª–∞ —Å—Ç–∏–ª—è:
            - –ù–ï –ù–ê–ß–ò–ù–ê–ô —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –¥–µ–ª—É
            - –û–±—Ä–∞—â–∞–π—Å—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ: "—Ä–µ–±—è—Ç–∫–∏", "–±—Ä–∞—Ç–∏—à–∫–∏", "—Å–µ—Å—Ç—Ä–µ–Ω–∫–∏", "—Ä–µ–±—è—Ç—É—à–∫–∏", "–¥—Ä—É–∑—å—è", "—Ç–æ–≤–∞—Ä–∏—â–∏"
            - –ü–∏—à–∏ –∫–∞–∫ –¥—Ä—É–≥ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥—É: "–±–ª–∏–Ω, –∑–¥–∞—Ä–æ–≤–∞", "—Ç–∞–∫, —Ä–µ–±—è—Ç–∫–∏", "–Ω—É —ç—Ç–æ –Ω–∏–∫—É–¥–∞ –Ω–µ –≥–æ–¥–∏—Ç—Å—è"
            - –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å, –º–µ–∂–¥–æ–º–µ—Ç–∏—è, —ç–º–æ—Ü–∏–∏
            - –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: "–æ–±—Å—É—Å—Å–∏—Ç–µ—Å—å", "–∑–∞–ø–∞—Å–∞–π—Ç–µ—Å—å –ø–æ–ø–∫–æ—Ä–Ω–æ–º", "–ø–ª–∞—á—É—â–∏–π —Ä–µ–±–µ–Ω–æ–∫ –∏ –Ω–∏–∫–∞–∫–∏—Ö —Å–ø–ª–µ—Ç–µ–Ω??"
            - –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ HTML-—Ç–µ–≥–∏: <b>, <i>, <u>
            - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–≥–∏: <pre>, <ul>, <li>, <code>
            - –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram
            - –ü—Ä–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –æ–±—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ –Ω–∏–∫–∏ (@username)
            - –ü—Ä–∏ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–∞ (–ò–≤–∞–Ω, –ú–∞—Ä–∏—è)
            - –¶–∏—Ñ—Ä—ã —É–ø–æ–º–∏–Ω–∞–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–¥–∞—é—â–∏–µ—Å—è/–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ
            - –ë–ï–ó –ª–∏—à–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ - –ø–∏—à–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ
            - –î–æ–±–∞–≤–ª—è–π <tg-spoiler></tg-spoiler> –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
            - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –æ —Ç–µ–º–∞—Ö –∏–ª–∏ —Ü–∏—Ç–∞—Ç–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º–Ω–æ–º, —Å—Å—ã–ª–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–π —Ç–µ–≥–æ–º <a href="https://t.me/c/–ß–ê–¢_–ê–ô–î–ò/–°–û–û–ë–©–ï–ù–ò–ï_–ê–ô–î–ò">—Å—Å—ã–ª–∫–∞</a>
            
            –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
            - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: 3500 —Å–∏–º–≤–æ–ª–æ–≤ (–¥–ª—è Telegram)
            - –ò–∑–±–µ–≥–∞–π –¥–ª–∏–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤ - —Ä–∞–∑–±–∏–≤–∞–π –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ
            - –ë–µ–∑ –ª–∏—à–Ω–∏—Ö HTML-—Ç–µ–≥–æ–≤ - —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ
            - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
            """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if messages_with_links:
            context += f"\n\n–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n" + "\n".join(messages_with_links[:30])
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã - –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏–ª –∑–∞ —á–∞—Ç–æ–º –∏ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–º—É –¥—Ä—É–≥—É, —á—Ç–æ —Ç–æ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏–ª. –¢–≤–æ–π —Å—Ç–∏–ª—å - –∂–∏–≤–∞—è –¥—Ä—É–∂–µ—Å–∫–∞—è –±–µ—Å–µ–¥–∞ –∑–∞ –ø–∏–≤–æ–º, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, —Å —à—É—Ç–∫–∞–º–∏ –∏ –ª–∏—á–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ø—Ä–æ—Å—Ç—ã–µ HTML-—Ç–µ–≥–∏: <b>, <i>, <u>. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π <pre>, <ul>, <li>, <code>. –ù–ï –ù–ê–ß–ò–ù–ê–ô —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –æ–±—Ä–∞—â–∞–π—Å—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ (—Ä–µ–±—è—Ç–∫–∏, –±—Ä–∞—Ç–∏—à–∫–∏, —Å–µ—Å—Ç—Ä–µ–Ω–∫–∏, –¥—Ä—É–∑—å—è). –ü–∏—à–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤. –î–æ–±–∞–≤–ª—è–π <tg-spoiler></tg-spoiler> –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –æ —Ç–µ–º–∞—Ö –∏–ª–∏ —Ü–∏—Ç–∞—Ç–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º–Ω–æ–º, —Å—Å—ã–ª–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–π —Ç–µ–≥–æ–º <a href='https://t.me/c/{chat_id_clean}/{msg.telegram_id}'>—Å—Å—ã–ª–∫–∞</a>."},
                {"role": "user", "content": context}
            ],
            max_tokens=1200,
            temperature=0.9
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        return f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ:</b> {str(e)}"


@staff_member_required
def group_statistics_view(request, group_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –≥—Ä—É–ø–ø–µ"""
    group = get_object_or_404(TelegramGroup, id=group_id)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    users_stats = []
    for user_in_group in group.useringroup_set.filter(is_active=True):
        user = user_in_group.user
        message_count = Message.objects.filter(user=user, chat=group).count()
        checkin = DailyCheckin.objects.filter(user=user, group=group).first()
        
        users_stats.append({
            'user': user,
            'message_count': message_count,
            'rating': user_in_group.rating,
            'coefficient': user_in_group.coefficient,
            'consecutive_days': checkin.consecutive_days if checkin else 0,
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    users_stats.sort(key=lambda x: x['rating'], reverse=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
    message_types = Message.objects.filter(chat=group).values('message_type').annotate(
        count=models.Count('id')
    ).order_by('-count')
    
    context = {
        'group': group,
        'users_stats': users_stats,
        'message_types': message_types,
        'total_messages': Message.objects.filter(chat=group).count(),
        'total_users': len(users_stats),
    }
    
    return render(request, 'friend_bot/group_statistics.html', context)


@staff_member_required
def dashboard_view(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏"""
    groups = TelegramGroup.objects.filter(is_active=True)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = User.objects.filter(is_active=True).count()
    total_messages = Message.objects.count()
    total_groups = groups.count()
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    top_users = UserInGroup.objects.select_related('user', 'group').order_by('-rating')[:10]
    
    context = {
        'groups': groups,
        'total_users': total_users,
        'total_messages': total_messages,
        'total_groups': total_groups,
        'top_users': top_users,
    }
    
    return render(request, 'friend_bot/dashboard.html', context)
